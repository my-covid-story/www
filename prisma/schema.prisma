// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Story {
  id             String      @id @default(cuid())
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  title          String
  content        String
  postal         String
  postalCode     PostalCode? @relation(fields: [postal], references: [code]) //nomigrate
  category       String
  contactName    String?
  displayName    String?
  email          String?
  twitter        String?
  phone          String?
  approved       Boolean     @default(false)
  deleted        Boolean     @default(false)
  viewCount      Int         @default(0)
  contentWarning Boolean     @default(false)
  mppMessageId   String?

  @@index([postal, approved])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id])

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum Province {
  NL
  NS
  PE
  NB
  QC
  ON
  MB
  SK
  AB
  BC
  NU
  NT
  YT
}

enum PostalCodeType {
  rural
  urban
}

// Currently populated with just FSAs, but could potentially hold full postal codes, as well.
model PostalCode {
  code     String               @id
  province Province
  type     PostalCodeType
  hotspot  Boolean              @default(false)
  name     String
  ridings  PostalCodeToRiding[]
  stories  Story[] //nomigrate
}

model Riding {
  province       Province
  id             String
  name           String
  population     Int?
  area           Int?
  url            String?
  mppName        String
  mppDesignation String
  mppFirstName   String
  mppLastName    String
  mppEmail       String
  mppPhone       String?
  mppParty       String?
  mppUrl         String?
  postalCodes    PostalCodeToRiding[]

  @@id([province, id])
}

model PostalCodeToRiding {
  postal     String
  postalCode PostalCode @relation(fields: [postal], references: [code])
  province   Province
  ridingId   String
  riding     Riding     @relation(fields: [province, ridingId], references: [province, id])
  weight     Float

  @@id([postal, province, ridingId])
}
